// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2024 03:03:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Parte_D
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Parte_D_vlg_sample_tst(
	clock,
	reset,
	x,
	sampler_tx
);
input  clock;
input  reset;
input  x;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Parte_D_vlg_check_tst (
	Z1,
	Z2,
	Z3,
	Z4,
	sampler_rx
);
input  Z1;
input  Z2;
input  Z3;
input  Z4;
input sampler_rx;

reg  Z1_expected;
reg  Z2_expected;
reg  Z3_expected;
reg  Z4_expected;

reg  Z1_prev;
reg  Z2_prev;
reg  Z3_prev;
reg  Z4_prev;

reg  Z1_expected_prev;
reg  Z2_expected_prev;
reg  Z3_expected_prev;
reg  Z4_expected_prev;

reg  last_Z1_exp;
reg  last_Z2_exp;
reg  last_Z3_exp;
reg  last_Z4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Z1_prev = Z1;
	Z2_prev = Z2;
	Z3_prev = Z3;
	Z4_prev = Z4;
end

// update expected /o prevs

always @(trigger)
begin
	Z1_expected_prev = Z1_expected;
	Z2_expected_prev = Z2_expected;
	Z3_expected_prev = Z3_expected;
	Z4_expected_prev = Z4_expected;
end



// expected Z1
initial
begin
	Z1_expected = 1'bX;
end 

// expected Z2
initial
begin
	Z2_expected = 1'bX;
end 

// expected Z3
initial
begin
	Z3_expected = 1'bX;
end 

// expected Z4
initial
begin
	Z4_expected = 1'bX;
end 
// generate trigger
always @(Z1_expected or Z1 or Z2_expected or Z2 or Z3_expected or Z3 or Z4_expected or Z4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Z1 = %b | expected Z2 = %b | expected Z3 = %b | expected Z4 = %b | ",Z1_expected_prev,Z2_expected_prev,Z3_expected_prev,Z4_expected_prev);
	$display("| real Z1 = %b | real Z2 = %b | real Z3 = %b | real Z4 = %b | ",Z1_prev,Z2_prev,Z3_prev,Z4_prev);
`endif
	if (
		( Z1_expected_prev !== 1'bx ) && ( Z1_prev !== Z1_expected_prev )
		&& ((Z1_expected_prev !== last_Z1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z1_expected_prev);
		$display ("     Real value = %b", Z1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z1_exp = Z1_expected_prev;
	end
	if (
		( Z2_expected_prev !== 1'bx ) && ( Z2_prev !== Z2_expected_prev )
		&& ((Z2_expected_prev !== last_Z2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z2_expected_prev);
		$display ("     Real value = %b", Z2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z2_exp = Z2_expected_prev;
	end
	if (
		( Z3_expected_prev !== 1'bx ) && ( Z3_prev !== Z3_expected_prev )
		&& ((Z3_expected_prev !== last_Z3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z3_expected_prev);
		$display ("     Real value = %b", Z3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z3_exp = Z3_expected_prev;
	end
	if (
		( Z4_expected_prev !== 1'bx ) && ( Z4_prev !== Z4_expected_prev )
		&& ((Z4_expected_prev !== last_Z4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z4_expected_prev);
		$display ("     Real value = %b", Z4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z4_exp = Z4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Parte_D_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
reg x;
// wires                                               
wire Z1;
wire Z2;
wire Z3;
wire Z4;

wire sampler;                             

// assign statements (if any)                          
Parte_D i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.reset(reset),
	.x(x),
	.Z1(Z1),
	.Z2(Z2),
	.Z3(Z3),
	.Z4(Z4)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// x
always
begin
	x = 1'b0;
	x = #10000 1'b1;
	#10000;
end 

Parte_D_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.x(x),
	.sampler_tx(sampler)
);

Parte_D_vlg_check_tst tb_out(
	.Z1(Z1),
	.Z2(Z2),
	.Z3(Z3),
	.Z4(Z4),
	.sampler_rx(sampler)
);
endmodule

