// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2024 04:44:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    restador_4_bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module restador_4_bits_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	Borrow_in,
	CLK,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  Borrow_in;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or Borrow_in or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module restador_4_bits_vlg_check_tst (
	Borrow_out,
	D0,
	D1,
	D2,
	D3,
	Zero,
	sampler_rx
);
input  Borrow_out;
input  D0;
input  D1;
input  D2;
input  D3;
input  Zero;
input sampler_rx;

reg  Borrow_out_expected;
reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  Zero_expected;

reg  Borrow_out_prev;
reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  Zero_prev;

reg  Borrow_out_expected_prev;
reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  Zero_expected_prev;

reg  last_Borrow_out_exp;
reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Borrow_out_prev = Borrow_out;
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	Borrow_out_expected_prev = Borrow_out_expected;
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	Zero_expected_prev = Zero_expected;
end



// expected Borrow_out
initial
begin
	Borrow_out_expected = 1'bX;
end 

// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
end 
// generate trigger
always @(Borrow_out_expected or Borrow_out or D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Borrow_out = %b | expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected Zero = %b | ",Borrow_out_expected_prev,D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,Zero_expected_prev);
	$display("| real Borrow_out = %b | real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real Zero = %b | ",Borrow_out_prev,D0_prev,D1_prev,D2_prev,D3_prev,Zero_prev);
`endif
	if (
		( Borrow_out_expected_prev !== 1'bx ) && ( Borrow_out_prev !== Borrow_out_expected_prev )
		&& ((Borrow_out_expected_prev !== last_Borrow_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Borrow_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Borrow_out_expected_prev);
		$display ("     Real value = %b", Borrow_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Borrow_out_exp = Borrow_out_expected_prev;
	end
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module restador_4_bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg Borrow_in;
reg CLK;
// wires                                               
wire Borrow_out;
wire D0;
wire D1;
wire D2;
wire D3;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
restador_4_bits i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.Borrow_in(Borrow_in),
	.Borrow_out(Borrow_out),
	.CLK(CLK),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.Zero(Zero)
);

// A0
initial
begin
	A0 = 1'b1;
end 

// A1
initial
begin
	A1 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b1;
end 

// B0
initial
begin
	B0 = 1'b0;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// B2
initial
begin
	B2 = 1'b1;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// Borrow_in
initial
begin
	Borrow_in = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

restador_4_bits_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.Borrow_in(Borrow_in),
	.CLK(CLK),
	.sampler_tx(sampler)
);

restador_4_bits_vlg_check_tst tb_out(
	.Borrow_out(Borrow_out),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

